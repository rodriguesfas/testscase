# ü•ã CodeDojo Makefile
# Comandos para gerenciar o ambiente Docker facilmente

.PHONY: help up down restart rebuild logs shell-php shell-postgres test-py test-js test-cpp admin migrate stats clean status backup restore

# Configura√ß√µes
COMPOSE_FILE = docker-compose.yml
POSTGRES_CONTAINER = codedojo_postgres
PHP_CONTAINER = codedojo_php
PGADMIN_CONTAINER = codedojo_pgadmin

# Comando padr√£o
help: ## üìã Mostra esta ajuda
	@echo "ü•ã CodeDojo - Comandos dispon√≠veis:"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-15s\033[0m %s\n", $$1, $$2}'
	@echo ""
	@echo "üìä Status atual:"
	@make --no-print-directory status

# === COMANDOS PRINCIPAIS ===

up: ## üöÄ Iniciar todos os containers
	@echo "üöÄ Iniciando CodeDojo..."
	docker-compose up -d --build
	@echo "‚è≥ Aguardando PostgreSQL..."
	@sleep 10
	@echo "‚úÖ CodeDojo iniciado!"
	@make --no-print-directory urls

down: ## üõë Parar todos os containers
	@echo "üõë Parando CodeDojo..."
	docker-compose down
	@echo "‚úÖ Containers parados!"

restart: ## üîÑ Reiniciar todos os containers
	@echo "üîÑ Reiniciando CodeDojo..."
	@make --no-print-directory down
	@make --no-print-directory up

rebuild: ## üèóÔ∏è Rebuild completo (limpa volumes)
	@echo "üèóÔ∏è Rebuild completo do CodeDojo..."
	docker-compose down -v
	docker-compose build --no-cache
	docker-compose up -d
	@echo "‚è≥ Aguardando PostgreSQL..."
	@sleep 15
	@echo "üì¶ Executando migra√ß√£o..."
	@make --no-print-directory migrate
	@echo "‚úÖ Rebuild conclu√≠do!"

# === LOGS E MONITORAMENTO ===

logs: ## üìã Ver logs de todos os containers
	docker-compose logs -f

logs-postgres: ## üìã Ver logs do PostgreSQL
	docker-compose logs -f postgres

logs-php: ## üìã Ver logs do PHP
	docker-compose logs -f php

logs-pgadmin: ## üìã Ver logs do pgAdmin
	docker-compose logs -f pgadmin

status: ## üìä Status dos containers
	@echo "üìä Status dos containers:"
	@docker-compose ps

# === ACESSO AOS CONTAINERS ===

shell-php: ## üíª Acesso shell ao container PHP
	@echo "üíª Acessando container PHP..."
	docker exec -it $(PHP_CONTAINER) bash

shell-postgres: ## üêò Acesso shell ao PostgreSQL
	@echo "üêò Acessando PostgreSQL..."
	docker exec -it $(POSTGRES_CONTAINER) psql -U codedojo_user -d codedojo

shell-postgres-root: ## üêò Acesso root ao container PostgreSQL
	@echo "üêò Acessando container PostgreSQL como root..."
	docker exec -it $(POSTGRES_CONTAINER) bash

# === TESTES ===

test-py: ## üêç Testar c√≥digo Python
	@echo "üêç Testando postes.py..."
	php run_db.php postes.py "Make Test"

test-js: ## üü® Testar c√≥digo JavaScript
	@echo "üü® Testando postes.js..."
	php run_db.php postes.js "Make Test"

test-cpp: ## ‚ö° Testar c√≥digo C++
	@echo "‚ö° Testando postes.cpp..."
	php run_db.php postes.cpp "Make Test"

test-all: ## üß™ Testar todos os c√≥digos
	@echo "üß™ Testando todas as linguagens..."
	@make --no-print-directory test-py
	@echo ""
	@make --no-print-directory test-js
	@echo ""
	@make --no-print-directory test-cpp

# === ADMINISTRA√á√ÉO ===

admin: ## üìã Interface administrativa
	@echo "üìã Abrindo interface administrativa..."
	php admin.php

migrate: ## üîÑ Migrar dados existentes
	@echo "üîÑ Executando migra√ß√£o de dados..."
	php migrate_data.php

stats: ## üìä Estat√≠sticas do sistema
	@echo "üìä Estat√≠sticas do CodeDojo:"
	@php -r "$$pdo = new PDO('pgsql:host=localhost;port=5432;dbname=codedojo', 'codedojo_user', 'codedojo_pass'); echo 'Desafios: ' . $$pdo->query('SELECT COUNT(*) FROM challenges')->fetchColumn() . \"\n\"; echo 'Submiss√µes: ' . $$pdo->query('SELECT COUNT(*) FROM submissions')->fetchColumn() . \"\n\"; echo 'Testes: ' . $$pdo->query('SELECT COUNT(*) FROM test_cases')->fetchColumn() . \"\n\";" 2>/dev/null || echo "‚ùå Banco n√£o est√° dispon√≠vel"

# === BACKUP E RESTORE ===

backup: ## üíæ Backup do banco de dados
	@echo "üíæ Criando backup do banco..."
	@mkdir -p backups
	@docker exec $(POSTGRES_CONTAINER) pg_dump -U codedojo_user codedojo > backups/codedojo_$(shell date +%Y%m%d_%H%M%S).sql
	@echo "‚úÖ Backup criado em backups/"

restore: ## üì• Restaurar backup (usar: make restore BACKUP=arquivo.sql)
	@if [ -z "$(BACKUP)" ]; then \
		echo "‚ùå Especifique o arquivo: make restore BACKUP=arquivo.sql"; \
		exit 1; \
	fi
	@echo "üì• Restaurando backup $(BACKUP)..."
	@cat $(BACKUP) | docker exec -i $(POSTGRES_CONTAINER) psql -U codedojo_user -d codedojo
	@echo "‚úÖ Backup restaurado!"

# === LIMPEZA ===

clean: ## üßπ Limpar containers e volumes n√£o utilizados
	@echo "üßπ Limpando Docker..."
	docker system prune -f
	docker volume prune -f
	@echo "‚úÖ Limpeza conclu√≠da!"

clean-all: ## üßπ Limpeza completa (CUIDADO: remove tudo)
	@echo "‚ö†Ô∏è  CUIDADO: Isso vai remover TODOS os dados!"
	@read -p "Tem certeza? (y/N): " confirm && [ "$$confirm" = "y" ]
	docker-compose down -v
	docker system prune -af
	docker volume prune -f
	@echo "‚úÖ Limpeza completa realizada!"

# === DESENVOLVIMENTO ===

dev: ## üîß Modo desenvolvimento (com rebuild e migra√ß√£o)
	@echo "üîß Configurando ambiente de desenvolvimento..."
	@make --no-print-directory rebuild
	@make --no-print-directory urls
	@echo "üéâ Ambiente pronto para desenvolvimento!"

setup: ## ‚öôÔ∏è Setup inicial completo
	@echo "‚öôÔ∏è Setup inicial do CodeDojo..."
	@make --no-print-directory up
	@make --no-print-directory migrate
	@make --no-print-directory urls
	@echo "üéâ Setup conclu√≠do com sucesso!"

urls: ## üåê Mostrar URLs importantes
	@echo ""
	@echo "üåê URLs importantes:"
	@echo "   PostgreSQL: localhost:5432"
	@echo "   pgAdmin:    http://localhost:8080"
	@echo "               (admin@codedojo.com / admin123)"
	@echo ""
	@echo "üîß Comandos √∫teis:"
	@echo "   make admin       # Interface administrativa"
	@echo "   make test-all    # Testar todos os c√≥digos"
	@echo "   make logs        # Ver logs"
	@echo ""

# === COMANDOS AVAN√áADOS ===

reset-db: ## üóÑÔ∏è Reset completo do banco (CUIDADO: apaga dados)
	@echo "‚ö†Ô∏è  CUIDADO: Isso vai apagar todos os dados do banco!"
	@read -p "Tem certeza? (y/N): " confirm && [ "$$confirm" = "y" ]
	docker-compose stop postgres
	docker volume rm codedojo_postgres_data 2>/dev/null || true
	docker-compose up -d postgres
	@echo "‚è≥ Aguardando PostgreSQL..."
	@sleep 15
	@make --no-print-directory migrate
	@echo "‚úÖ Banco resetado!"

check: ## üîç Verificar se tudo est√° funcionando
	@echo "üîç Verificando CodeDojo..."
	@echo -n "Docker: "
	@docker --version > /dev/null 2>&1 && echo "‚úÖ" || echo "‚ùå"
	@echo -n "Docker Compose: "
	@docker-compose --version > /dev/null 2>&1 && echo "‚úÖ" || echo "‚ùå"
	@echo -n "Containers ativos: "
	@if [ $$(docker-compose ps -q | wc -l) -eq 3 ]; then echo "‚úÖ (3/3)"; else echo "‚ùå ($$(docker-compose ps -q | wc -l)/3)"; fi
	@echo -n "PostgreSQL: "
	@docker exec $(POSTGRES_CONTAINER) pg_isready -U codedojo_user -d codedojo > /dev/null 2>&1 && echo "‚úÖ" || echo "‚ùå"
	@echo -n "PHP: "
	@php --version > /dev/null 2>&1 && echo "‚úÖ" || echo "‚ùå"

# === COMANDOS DE TESTE ESPEC√çFICOS ===

test-file: ## üìù Testar arquivo espec√≠fico (usar: make test-file FILE=arquivo.py AUTHOR="Nome")
	@if [ -z "$(FILE)" ]; then \
		echo "‚ùå Especifique o arquivo: make test-file FILE=arquivo.py"; \
		exit 1; \
	fi
	@echo "üìù Testando $(FILE)..."
	php run_db.php $(FILE) "$(or $(AUTHOR),Make Test)"

create-challenge: ## ‚ûï Criar novo desafio interativo
	@echo "‚ûï Criando novo desafio..."
	@make --no-print-directory admin

# === INFORMA√á√ïES ===

info: ## ‚ÑπÔ∏è Informa√ß√µes do sistema
	@echo "‚ÑπÔ∏è Informa√ß√µes do CodeDojo:"
	@echo "   Vers√£o Docker: $$(docker --version)"
	@echo "   Vers√£o Compose: $$(docker-compose --version)"
	@echo "   Diret√≥rio: $$(pwd)"
	@echo "   Arquivos principais: $$(ls -1 *.php *.yml *.sh 2>/dev/null | wc -l) encontrados"
	@make --no-print-directory status

# Comando padr√£o quando n√£o especificado
.DEFAULT_GOAL := help
